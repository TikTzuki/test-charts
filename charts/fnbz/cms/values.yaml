global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
cms:
  image:
    registry: docker.io
    repository: tiktuzki/fnb-cms
    tag: latest
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  replicaCount: 1
  containerPorts:
    http: 80
    https: 443
  livenessProbe:
    enabled: true
    initialDelaySeconds: 25
    periodSeconds: 20
    timeoutSeconds: 120
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /actuator/health
      port: http
  readinessProbe:
    enabled: true
    initialDelaySeconds: 25
    periodSeconds: 10
    timeoutSeconds: 150
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /actuator/health
      port: http
  startupProbe:
    enabled: false
    initialDelaySeconds:
    periodSeconds:
    timeoutSeconds:
    failureThreshold:
    successThreshold:
    httpGet:
      path: /actuator/health
      port: http
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resources:
    limits: {}
    requests: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false

  
  existingConfigmap:
  command: []
  args: []
  hostAliases: []
  daemonsetAnnotations: {}
  deploymentAnnotations: {}
  statefulsetAnnotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: %%COMPONENT_NAME%%.local
  ingressClassName: ""
  path: /

  annotations: {}

  tls: false

  selfSigned: false

  extraHosts: []

  extraPaths: []

  extraTls: []

  secrets: []

  extraRules: []

persistence:
  enabled: true
  mountPath: /bitnami/cms/data
  subPath: ""
  storageClass: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  existingClaim: ""
  selector: {}

  dataSource: {}

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 111-debian-11-r91
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    runAsUser: 0

serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    annotations: {}
    labels: {}
    jobLabel: ""
    honorLabels: false
    interval: ""
    scrapeTimeout: ""
    metricRelabelings: []
    relabelings: []
    selector: {}
